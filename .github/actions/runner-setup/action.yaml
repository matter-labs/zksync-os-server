name: 'Setup runner'

description: 'Setup self-hosted runner for zksync workflows execution.'

inputs:
  foundry_version:
    type: string
    description: 'Version of foundry to use.'
    required: false
    # Pinned to a specific stable version to avoid breaking changes.
    default: 'v1.3.4'
  enable_cache:
    type: string
    description: 'Whether to enable cache.'
    required: false
    default: 'true'
  save_cache:
    type: string
    description: 'Whether to save cache.'
    required: false
    default: 'false'
  cache_shared_key:
    type: string
    description: 'Shared key for cache.'
    required: false
    default: 'dev'


outputs:
  cache-hit:
    description: 'Whether cache hit.'
    value: ${{ steps.rust-cache.outputs.cache-hit }}


runs:
  using: composite
  steps:

    - name: Install linux packages
      shell: 'bash -ex {0}'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if command -v sudo >/dev/null 2>&1; then
          SUDO=sudo
        fi
        ${SUDO} apt update && ${SUDO} apt install -y libclang-dev wget jq libssl-dev pkg-config curl git

    - name: Add cuda to path
      shell: 'bash -ex {0}'
      run: echo "/usr/local/nvidia/bin:/usr/local/cuda/bin" >> "${GITHUB_PATH}"

    - name: Install sccache
      shell: 'bash -ex {0}'
      env:
        SCCACHE_VERSION: 'v0.10.0'
        SCCACHE_URL: "https://github.com/mozilla/sccache/releases/download/"
      run: |
        SCCACHE_FILENAME="sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl"
        wget --no-verbose "${SCCACHE_URL}/${SCCACHE_VERSION}/${SCCACHE_FILENAME}.tar.gz"
        tar xzf "${SCCACHE_FILENAME}.tar.gz"
        echo "${PWD}/${SCCACHE_FILENAME}" >> "${GITHUB_PATH}"
        export PATH="${PWD}/${SCCACHE_FILENAME}:${PATH}"
        which sccache
        sccache --version

    - name: Setup sccache
      shell: 'bash -ex {0}'
      run: |
        echo SCCACHE_CACHE_SIZE=50G >> "${GITHUB_ENV}"
        echo SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage >> "${GITHUB_ENV}"
        echo SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com >> "${GITHUB_ENV}"
        echo SCCACHE_ERROR_LOG=/tmp/sccache_log.txt >> "${GITHUB_ENV}"
        echo SCCACHE_GCS_RW_MODE=READ_WRITE >> "${GITHUB_ENV}"
        echo RUSTC_WRAPPER=sccache >> "${GITHUB_ENV}"
        echo SCCACHE_SERVER_PORT=4225 >> "${GITHUB_ENV}"
        sccache --start-server

    - name: Install cmake
      if: ${{ contains(runner.name, 'matterlabs') }}
      shell: 'bash -ex {0}'
      env:
        CMAKE_VERSION: '4.1.1'
        CMAKE_URL: 'https://github.com/Kitware/CMake/releases/download/'
      run: |
        CMAKE_FILENAME="cmake-${CMAKE_VERSION}-linux-x86_64"
        wget --no-verbose "${CMAKE_URL}/v${CMAKE_VERSION}/${CMAKE_FILENAME}.tar.gz"
        tar xzf "${CMAKE_FILENAME}.tar.gz"
        echo "${PWD}/${CMAKE_FILENAME}/bin" >> "${GITHUB_PATH}"
        export PATH="${PWD}/${CMAKE_FILENAME}/bin:${PATH}"
        which cmake
        cmake --version

    - name: Install yq
      if: ${{ contains(runner.name, 'matterlabs') }}
      shell: 'bash -ex {0}'
      env:
        YQ_DOWNLOAD_URL: https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64
      run: |
        wget "${YQ_DOWNLOAD_URL}"
        mv yq_linux_amd64 yq
        chmod +x yq
        echo "${PWD}" >> "${GITHUB_PATH}"

    - name: Install Rust toolchain
      uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
      env:
        # To fix rate limiting issues with GitHub API
        GITHUB_TOKEN: ${{ github.token }}
      with:
        inherit-toolchain: true
        components: 'rustfmt,clippy'
        bins: 'cargo-nextest'
        cache: false

    - name: Rust cache
      if: inputs.enable_cache == 'true'
      uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      id: rust-cache
      with:
        shared-key: "${{ inputs.cache_shared_key }}"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ inputs.save_cache == 'true' }}

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@82dee4ba654bd2146511f85f0d013af94670c4de # v1.4.0
      with:
        version: ${{ inputs.foundry_version }}
