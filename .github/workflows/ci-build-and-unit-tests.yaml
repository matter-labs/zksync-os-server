name: Workflow for building and running unit tests
on:
  workflow_call:
    secrets:
        GH_TOKEN:
          description: "Token for cloning private repositories"
          required: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PASSED_ENV_VARS: RUST_BACKTRACE
  CARGO_NET_GIT_FETCH_WITH_CLI: true


jobs:
  build-and-test:
    name: Build and Test
    runs-on: matterlabs-ci-runner-highmem-long

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup misc environment variables
      shell: bash
      run: |
        echo $(pwd)/.github/scripts >> $GITHUB_PATH
        echo ZKSYNC_OS_HOME=$(pwd) >> $GITHUB_ENV

    - name: Setup sccache for building Rust code inside Docker
      shell: bash
      run: |
        echo SCCACHE_CACHE_SIZE=50G >> .github/.env
        echo SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage >> .github/.env
        echo SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com >> .github/.env
        echo SCCACHE_ERROR_LOG=/tmp/sccache_log.txt >> .github/.env
        echo SCCACHE_GCS_RW_MODE=READ_WRITE >> .github/.env
        echo RUSTC_WRAPPER=sccache >> .github/.env
        echo DOCKER_PWD=$(pwd) >> .github/.env

    - name: Start CI Docker
      shell: bash
      run: ci_up

    # This can be removed once zksync-airbender-prover is public.r
    - name: Configure Git for private repos
      run: |
        ci_run git config --global url."https://${{ secrets.GH_TOKEN }}:x-oauth-basic@github.com/".insteadOf "ssh://git@github.com/"

    - name: Start sccache server
      shell: bash
      run: ci_run sccache --start-server

    - name: Build project
      run: ci_run cargo build --verbose --all-targets --workspace --exclude zksync_os_integration_tests

    - name: Run unit tests
      run: ci_run cargo test --verbose --workspace --exclude zksync_os_integration_tests

    - name: Show sccache logs
      if: always()
      run: |
        ci_run sccache --show-stats || true
        ci_run cat /tmp/sccache_log.txt || true

  check-replay-wire-format-version:
    name: Check replay wire format version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check that replay wire format version is set correctly
        shell: bash
        run: |
          echo "A"
          FILE=lib/storage_api/src/replay_wire_format.rs
          echo "B"
          TAG=$(git tag --list --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
          echo "C"
          git fetch --depth=1 origin tag "$TAG"
          echo "D"
          if git show "$TAG:$FILE" > /tmp/old_wire_format.rs 2>/dev/null; then
            OLD_VERSION=$(grep 'REPLAY_WIRE_FORMAT_VERSION' /tmp/old_wire_format.rs | grep -oE '= *[0-9]+' | grep -oE '[0-9]+')
          else
            echo "File did not exist in previous version, treating as empty and version 0."
            echo -n "" > /tmp/old_wire_format.rs
            OLD_VERSION=0
          fi
          cp "$FILE" /tmp/new_wire_format.rs
          if ! diff -q /tmp/old_wire_format.rs /tmp/new_wire_format.rs; then
            NEW_VERSION=$(grep 'REPLAY_WIRE_FORMAT_VERSION' /tmp/new_wire_format.rs | grep -oE '= *[0-9]+' | grep -oE '[0-9]+')
            if [ "$NEW_VERSION" -ne $((OLD_VERSION + 1)) ]; then
              echo "Wire format changed, but REPLAY_WIRE_FORMAT_VERSION is not exactly one higher! ($OLD_VERSION -> $NEW_VERSION)"
              exit 1
            fi
            echo "Wire format changed and version incremented correctly ($OLD_VERSION -> $NEW_VERSION)."
          else
            echo "Wire format did not change."
          fi