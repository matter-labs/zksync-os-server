name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PASSED_ENV_VARS: RUST_BACKTRACE

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: matterlabs-ci-runner-ultra-performance
    strategy:
      matrix:
        filterset: [ "core", "prover" ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup misc environment variables
      shell: bash
      run: |
        echo $(pwd)/.github/scripts >> $GITHUB_PATH
        echo ZKSYNC_OS_HOME=$(pwd) >> $GITHUB_ENV

    - name: Setup sccache for building Rust code inside Docker
      shell: bash
      run: |
        echo SCCACHE_CACHE_SIZE=50G >> .github/.env
        echo SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage >> .github/.env
        echo SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com >> .github/.env
        echo SCCACHE_ERROR_LOG=/tmp/sccache_log.txt >> .github/.env
        echo SCCACHE_GCS_RW_MODE=READ_WRITE >> .github/.env
        echo RUSTC_WRAPPER=sccache >> .github/.env
        echo DOCKER_PWD=$(pwd) >> .github/.env

    - name: Start CI Docker
      shell: bash
      run: ci_up

    - name: Start sccache server
      shell: bash
      run: ci_run sccache --start-server

    - name: Install foundry
      run: |
        ci_run wget https://foundry.paradigm.xyz -O foundryup.sh
        ci_run bash foundryup.sh
        ci_run /root/.foundry/bin/foundryup
        echo /root/.foundry/bin >> $GITHUB_PATH

    - name: Run integration tests (no prover)
      if: matrix.filterset == 'core'
      # Run all tests that don't require features enabled (e.g. `prover-tests`/`gpu-prover-tests`).
      run: ci_run cargo nextest run --profile ci -p zksync_os_integration_tests

    - name: Run integration tests (prover)
      if: matrix.filterset == 'prover'
      # Run prover tests. They need to be compiled in release mode for efficiency and to avoid stack overflow errors.
      # We only run tests located in `prover.rs` (that's what `binary(prover)` filters for). Tests can be run in GPU
      # mode if `gpu-prover-tests` feature is enabled instead of `prover-tests` (requires an L4 runner or better).
      run: ci_run cargo nextest run --release --profile ci -p zksync_os_integration_tests --features prover-tests -E 'binary(prover)' --no-capture

    - name: Show sccache logs
      if: always()
      run: |
        ci_run sccache --show-stats || true
        ci_run cat /tmp/sccache_log.txt || true
