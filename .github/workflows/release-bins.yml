name: Release binaries

permissions:
  contents: write
  id-token: write
  attestations: write

on:
  # TODO: remove after testing
  pull_request:
#  schedule:
#    - cron: "0 6 * * *"
#  workflow_dispatch:
#  # Workflow call trigger for stable releases generation
#  workflow_call:
#    inputs:
#      tag:
#        description: "Tag to use for the release."
#        type: string
#        required: true

env:
  ZKSYNC_OS_SERVER_BIN: 'zksync_os_bin'
  RELEASE_PROFILE: 'maxperf'
  SERVER_LOGFILE: zksync-os-server.log.txt
  FOUNDRY_VERSION: 'v1.3.4'

defaults:
  run:
    shell: 'bash -ex {0}'

jobs:
  # Build server binaries for all target platforms
  release-bins:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu-22.04 based high performance runner
          - runner: matterlabs-ci-runner-high-performance
            target: x86_64-unknown-linux-gnu
          # Ubuntu-22.04 based ARM linux runner
          - runner: matterlabs-ci-runner-arm
            target: aarch64-unknown-linux-gnu
          # Latest x86 macos runner
          - runner: macos-latest-large
            target: x86_64-apple-darwin
          # Latest ARM (M-series) macos runner
          - runner: macos-latest-xlarge
            target: aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.tag || '' }}

      - name: Install required packages
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt update && sudo apt --assume-yes install \
            curl jq libssl-dev libclang-dev pkg-config build-essential
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo dpkg --add-architecture arm64
            sudo apt --assume-yes install libssl-dev:arm64
          fi

      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        env:
          # To fix rate limiting issues with GitHub API
          GITHUB_TOKEN: ${{ github.token }}
        with:
          inherit-toolchain: true
          cache: false

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@82dee4ba654bd2146511f85f0d013af94670c4de # v1.4.0
        with:
          version: '${{ env.FOUNDRY_VERSION }}'

      - name: Build
        env:
          # Build static binaries
          RUSTFLAGS: '-C target-feature=+crt-static'
        run: |
          cargo build --profile "${RELEASE_PROFILE}" \
            --target "${{ matrix.target }}" --bin "${ZKSYNC_OS_SERVER_BIN}"

      - name: Check executable
        env:
          TIMEOUT: 60
          INTERVAL: 2
        run: |
          anvil --load-state ./zkos-l1-state.json --port 8545 > anvil.log.txt 2>&1 &
          ./target/${{ matrix.target }}/${RELEASE_PROFILE}/${ZKSYNC_OS_SERVER_BIN} > ${SERVER_LOGFILE} 2>&1 &
          elapsed=0
          while ! nc -z localhost 3050; do
            if (( elapsed >= TIMEOUT )); then
              echo "Timeout reached after $elapsed seconds. Server did not start."
              exit 1
            fi
            echo "Waiting for server to start..."
            sleep ${INTERVAL}
            (( elapsed += INTERVAL ))
          done
          echo "Sequencer is up and running."
          FIRST_BLOCK=$(curl -X POST http://localhost:3050 \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc": "2.0",
              "method": "eth_getBlockByNumber",
              "params": ["0x1", false],
              "id": 1
            }')
          # Check that the response contains a hash and a non-empty transactions array
          if echo "${FIRST_BLOCK}" | jq -e '.result.hash and (.result.transactions | length > 0)' >/dev/null; then
            echo "✅ First block is correct."
          else
            echo "❌ Missing hash or transactions array is empty in the first block."
            echo "${FIRST_BLOCK}"
            cat "${SERVER_LOGFILE}"
          fi

      - name: Prepare tarballs
        run: |
          mv ./target/${{ matrix.target }}/${RELEASE_PROFILE}/${ZKSYNC_OS_SERVER_BIN} ./${ZKSYNC_OS_SERVER_BIN}
          tar -czf ${{ env.ZKSYNC_OS_SERVER_BIN }}-${{ inputs.tag || 'v1.2.3' }}-${{ matrix.target }}.tar.gz ${{ env.ZKSYNC_OS_SERVER_BIN }}

      - name: Upload binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.ZKSYNC_OS_SERVER_BIN }}-${{ inputs.tag || 'v1.2.3' }}-${{ matrix.target }}.tar.gz
          path: ${{ env.ZKSYNC_OS_SERVER_BIN }}-${{ inputs.tag || 'v1.2.3' }}-${{ matrix.target }}.tar.gz
