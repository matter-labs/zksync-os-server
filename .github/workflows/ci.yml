name: CI

on:
  push:
    branches:
     - main
  pull_request:
# Disabled for now, as we don't want to run CI twice
# merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TEST_RESULTS_XML: 'test-results.xml'

jobs:

  ############################
  #     Format and lint      #
  ############################
  format-and-lint:
    runs-on: ubuntu-24.04-github-hosted-32core
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'format-and-lint'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy (core)
        run: cargo clippy --all-targets --all-features --workspace --exclude zksync_os_integration_tests -- -D warnings

      - name: Run clippy (integration tests)
        run: cargo clippy --all-targets -p zksync_os_integration_tests -- -D warnings


  ############################
  # Build and run unit tests #
  ############################
  build-and-test:
    runs-on: ubuntu-24.04-github-hosted-32core
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'build-and-test'

      - name: Build project
        run: cargo build --all-targets --workspace --exclude zksync_os_integration_tests

      - name: Run unit tests
        run: cargo nextest run --workspace --exclude zksync_os_integration_tests

      - name: Upload test results
        if: always() && !cancelled()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: 'Unit Tests'
          files: target/nextest/default/${{ env.TEST_RESULTS_XML }}
          action_fail_on_inconclusive: true


  ############################
  #    Integration tests     #
  ############################
  integration-tests:
    strategy:
      fail-fast: false
      matrix:
        filterset:
          - "core"
          - "prover"
    runs-on: ${{ matrix.filterset == 'core' && 'ubuntu-24.04-github-hosted-32core' || 'matterlabs-ci-runner-ultra-performance' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'integration-tests-${{ matrix.filterset }}'

      - name: Run integration tests (no prover)
        if: matrix.filterset == 'core'
        # Run all tests that don't require features enabled (e.g. `prover-tests`/`gpu-prover-tests`).
        run: |
          cargo nextest run --profile ci -p zksync_os_integration_tests

      - name: Run integration tests (prover)
        if: matrix.filterset == 'prover'
        # Run prover tests. They need to be compiled in release mode for efficiency and to avoid stack overflow errors.
        # We only run tests located in `prover.rs` (that's what `binary(prover)` filters for). Tests can be run in GPU
        # mode if `gpu-prover-tests` feature is enabled instead of `prover-tests` (requires an L4 runner or better).
        run: cargo nextest run --release --profile ci -p zksync_os_integration_tests --features prover-tests -E 'binary(prover)' --no-capture
  
  #########################################
  # Enforce wire format file immutability #
  #########################################
  check-replay-wire-format-version:
    name: Check replay wire format version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch tags

      - name: Check that replay wire format version is set correctly
        shell: bash
        run: |
          # get latest tag (latest release)
          TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-version:refname | head -n 1)

          # check that released wire format files that still exist are unchanged
          DIR=lib/storage_api/src/replay_wire_format
          git fetch --depth=1 origin tag "$TAG"
          for FILE in "$DIR"/v*.rs; do
            if git show "$TAG:$FILE" > /tmp/old_wire_format.rs 2>/dev/null; then
              if ! diff -q /tmp/old_wire_format.rs "$FILE"; then
                echo "Change detected in already released wire format: $FILE"
                exit 1
              fi
            else
              echo "New wire format created in this change: $FILE"
            fi
          done

  ci-success:
    name: Github Status Check
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    needs:
      [
        format-and-lint,
        build-and-test,
        integration-tests,
        check-replay-wire-format-version,
      ]
    steps:
      - name: Status
        run: |
          # This will check all jobs status in the `needs` list, and fail job if one is failed.
          # Since we split prover and core to different flows, this job will be only as Required Status Check in the Pull Request.
          if [[ ${{ contains(join(needs.*.result, ','), 'failure') }} == "true" ]]; then
            echo "Intentionally failing to block PR from merging"
            exit 1
          fi
