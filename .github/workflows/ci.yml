name: CI

on:
  push:
    branches:
     - main
  pull_request:
# Disabled for now, as we don't want to run CI twice
# merge_group:

# Cancel new runs for PRs only
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

# Default environment variables
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TEST_RESULTS_XML: 'test-results.xml'
  PROVER_GPU_TESTS: 'prover-gpu-tests'
  # Run tests 10 times in case of push to main branch to catch possible flakiness
  NEXTEST_ITERATIONS: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--stress-count 10' || '' }}

# Add default permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:

  ############################
  #  Build, format and lint  #
  ############################
  build-format-and-lint:
    runs-on: matterlabs-ci-runner-high-performance
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'build-format-and-lint'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy (core)
        run: cargo clippy --all-targets --all-features --workspace --exclude zksync_os_integration_tests -- -D warnings

      - name: Run clippy (integration tests)
        run: cargo clippy --all-targets -p zksync_os_integration_tests -- -D warnings

      - name: Build project
        run: cargo build --all-targets --workspace --exclude zksync_os_integration_tests


  ############################
  #      Run unit tests      #
  ############################
  unit-tests:
    runs-on: matterlabs-ci-runner-high-performance
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'unit-tests'

      - name: Run unit tests
        env:
          RUSTC_BOOTSTRAP: 1
        run: |
          # pin to a specific version to avoid breaking changes
          cargo install --locked cargo-llvm-cov@0.6.18
          # Run regression tests with code coverage
          cargo llvm-cov --lcov --output-path lcov.info \
            nextest --workspace --exclude zksync_os_integration_tests ${NEXTEST_ITERATIONS}

      - name: Generate codecov report
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        if: always() && !cancelled()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          slug: ${{ github.repository }}

      - name: Upload test results to Codecov
        if: always() && !cancelled()
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: 'target/nextest/default/${{ env.TEST_RESULTS_XML }}'
          slug: ${{ github.repository }}


  ############################
  #  Core integration tests  #
  ############################
  core-integration-tests:
    runs-on: matterlabs-ci-runner-high-performance
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'core-integration-tests'

      - name: Run integration tests (no prover)
        # Run all tests that don't require features enabled (e.g. `prover-tests`/`gpu-prover-tests`).
        run: cargo nextest run --profile ci -p zksync_os_integration_tests ${NEXTEST_ITERATIONS}


  ############################################
  # Enforce EN sync format file immutability #
  ############################################
  check-EN-backwards-compatibility:
    name: Check replay wire format version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # fetch tags

      - name: Check that replay wire format version is set correctly
        shell: bash
        run: |
          # get latest tag (latest release)
          TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-version:refname | head -n 1)

          # check that released wire format files that still exist are unchanged
          DIR=lib/storage_api/src/replay_wire_format
          git fetch --depth=1 origin tag "$TAG"
          for FILE in "$DIR"/v*.rs; do
            if git show "$TAG:$FILE" > /tmp/old_wire_format.rs 2>/dev/null; then
              if ! diff -q /tmp/old_wire_format.rs "$FILE"; then
                echo "Change detected in already released wire format: $FILE"
                exit 1
              fi
            else
              echo "New wire format created in this change: $FILE"
            fi
          done


  ####################################
  #  Build prover integration tests  #
  ####################################
  prover-integration-tests-build:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: nvidia/cuda:12.9.1-devel-ubuntu22.04
    steps:

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          cache_shared_key: 'prover-integration-tests'

      - name: Check CUDA version
        run: |
          nvcc --version
  
      - name: Prepare bellman-cuda directory
        shell: 'bash -ex {0}'
        run: |
          release=($(curl --silent https://api.github.com/repos/matter-labs/era-bellman-cuda/releases | jq -r '.[0] | .name, .tarball_url, .assets[0].browser_download_url'))
          curl --silent -L "${release[1]}" --output bellman-cuda-source.tar.gz
          curl --silent -L "${release[2]}" --output bellman-cuda.tar.gz
          mkdir -p bellman-cuda
          tar xvfz bellman-cuda.tar.gz -C ./bellman-cuda
          tar xvfz bellman-cuda-source.tar.gz -C ./bellman-cuda --strip-components=1 --wildcards \*/src/

      # Build and archive tests to execute on another machine.
      # Use `cargo nextest archive` to make sure that all dependencies are included properly.
      - name: Build and archive test
        env:
          CUDAARCHS: 80
          # This is a special mandatory hack to transfer test binary from one machine to another.
          # We must use a dummy `./` path addition in the workspace path /home/runner/_work
          # to prevent GitHub Actions to replace it to the mapped `/__w` folder in the docker container.
          # This is required to make sure that the paths to workspace artifacts like zkos-l1-state.json
          # are correct inside prebuilt binary.
          # This variable overwrites the default relative `./` in the .cargo/config.toml.
          WORKSPACE_DIR: "/home/./runner/_work/zksync-os-server/zksync-os-server"
          BELLMAN_CUDA_DIR: ${{ github.workspace }}/bellman-cuda
        run: |
          cargo nextest archive --release --profile ci -p zksync_os_integration_tests \
            --features gpu-prover-tests --archive-file ${PROVER_GPU_TESTS}.tar.zst

      - name: Upload tests
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.PROVER_GPU_TESTS }}
          path: ${{ env.PROVER_GPU_TESTS }}.tar.zst
          if-no-files-found: error


  #################################################
  #  Run prover integration tests on GPU machine  #
  #################################################
  prover-integration-tests:
    runs-on: matterlabs-ci-gpu-runner
    needs: prover-integration-tests-build
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup runner
        uses: ./.github/actions/runner-setup
        with:
          save_cache: 'false'
          cache_shared_key: 'prover-integration-tests'

      - name: Check Nvidia driver version
        run: |
          nvidia-smi

      - name: Prepare bellman-cuda directory
        shell: 'bash -ex {0}'
        run: |
          release=($(curl --silent https://api.github.com/repos/matter-labs/era-bellman-cuda/releases | jq -r '.[0] | .name, .tarball_url, .assets[0].browser_download_url'))
          curl --silent -L "${release[1]}" --output bellman-cuda-source.tar.gz
          curl --silent -L "${release[2]}" --output bellman-cuda.tar.gz
          mkdir -p bellman-cuda
          tar xvfz bellman-cuda.tar.gz -C ./bellman-cuda
          tar xvfz bellman-cuda-source.tar.gz -C ./bellman-cuda --strip-components=1 --wildcards \*/src/

      - name: Download prebuilt tests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ env.PROVER_GPU_TESTS }}

      - name: Download CRS setup file
        run: |
          mkdir -p crs
          curl -L https://storage.googleapis.com/matterlabs-setup-keys-europe/setup-keys/setup_compact.key -o crs/setup_compact.key

      # --workspace-remap is mandatory (!)
      # Otherwise, the prebuilt binary will not be able to find its dependencies and fails to execute
      - name: Run prover tests on GPU
        env:
          BELLMAN_CUDA_DIR: ${{ github.workspace }}/bellman-cuda
          COMPACT_CRS_FILE: ${{ github.workspace }}/crs/setup_compact.key
          RUST_MIN_STACK: 534217728
        run: |
          ulimit -s 300000
          cargo nextest run -E 'binary(prover)' --no-capture \
            --archive-file "${PROVER_GPU_TESTS}.tar.zst" \
            --workspace-remap ${GITHUB_WORKSPACE} ${NEXTEST_ITERATIONS}


  ###############################
  #  Mandatory CI status check  #
  ###############################
  ci-success:
    name: Github Status Check
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    needs:
      [
        build-format-and-lint,
        unit-tests,
        core-integration-tests,
        prover-integration-tests-build,
        prover-integration-tests,
        check-EN-backwards-compatibility,
      ]
    steps:
      - name: Status
        run: |
          # This will check all jobs status in the `needs` list, and fail job if one is failed.
          # Since we split prover and core to different flows, this job will be only as Required Status Check in the Pull Request.
          if [[ ${{ contains(join(needs.*.result, ','), 'failure') }} == "true" ]]; then
            echo "Intentionally failing to block PR from merging"
            exit 1
          fi
